<?php

namespace MC\PostBundle\Repository;
use MC\UserBundle\Entity\User;

/**
 * PostRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PostRepository extends \Doctrine\ORM\EntityRepository
{
    public function getPostsQB(User $user, $order_by = 'dateCreation', $limit = false, $order = 'ASC'){
        $qb = $this
        ->createQueryBuilder('post');
        //on ajoute le critaire utilisateur parmi les auteurs des posts
        $qb
        ->andWhere(':user MEMBER OF post.authors')
            ->setParameter('user', $user);
        
        if($order_by){
            $qb
                ->orderBy($qb->getRootAlias(). '.' . $order_by, $order);
        }

         if($limit){
             $qb
            ->limit(':limit')
            ->setParameter('limit', $limit);
         }

        return $qb;
    }

    //GETTERS
    public function getPosts(User $user, $order_by = false, $limit = false, $order = false){
        $qb = $this->getPostsQB($user, $order_by, $limit, $order);
        return $qb->getQuery()->getResult();
    }

    public function getPublishedPosts(User $user, $order_by = false, $limit = false, $order = 'ASC'){
        $now = new \DateTime();
        $qb = $this->getPostsQB($user);
        $qb
        ->andWhere('post.datePublication <= :now')
            ->setParameter('now', $now);
        return $qb->getQuery()->getResult();
    }

    public function getOnlinePosts(User $user, $order_by = false, $limit = false, $order = 'ASC'){
        $now = new \DateTime();
        $qb = $this
        ->getPostsQB($user, $order_by, $limit, $order);
        $qb
        ->andWhere('post.datePublication <= :now')
            ->setParameter('now', $now)
        ->andWhere('post.datePeremption > :now OR post.datePeremption IS NULL')
            ->setParameter('now', $now);
        return $qb->getQuery()->getResult();
    }

    public function getOnlineWithPeremptionPosts(User $user, $order_by = false, $limit = false, $order = 'ASC'){
        $now = new \DateTime();
        $qb = $this
        ->getPostsQB($user, $order_by, $limit, $order);
        $qb
        ->andWhere('post.datePublication <= :now')
            ->setParameter('now', $now)
        ->andWhere('post.datePeremption > :now')
            ->setParameter('now', $now);
        return $qb->getQuery()->getResult();
    }

    public function getToBePublishedPosts(User $user, $order_by = false, $limit = false, $order = 'ASC'){
        $now = new \DateTime();
        $qb = $this
        ->getPostsQB($user, $order_by, $limit, $order);
        $qb
        ->andWhere('post.datePublication > :now')
            ->setParameter('now', $now);
        return $qb->getQuery()->getResult();
    }

    public function getUnpublishedPosts(User $user, $order_by = false, $limit = false, $order = 'ASC'){
        $now = new \DateTime();
        $qb = $this
        ->getPostsQB($user, $order_by, $limit, $order);
        $qb
        ->andWhere('post.datePeremption < :now')
            ->setParameter('now', $now);
        return $qb->getQuery()->getResult();
    }

    public function getDraftPosts(User $user, $order_by = false, $limit = false, $order = 'ASC'){
        $qb = $this->getPostsQB($user, $order_by, $limit, $order);
        $qb
        ->andWhere('post.datePublication IS NULL');
        return $qb->getQuery()->getResult();
    }

    public function getPrivatePosts(User $user, $order_by = false, $limit = false, $order = 'ASC'){
        $qb = $this->getPostsQB($user, $order_by, $limit, $order);
        $qb
        ->andWhere('post.visibilite = :visibilite')
            ->setParameter('visibilite', 'private');
        return $qb->getQuery()->getResult();
    }

    public function getPublicPosts(User $user, $order_by = false, $limit = false, $order = 'ASC'){
        $qb = $this->getPostsQB($user, $order_by, $limit, $order);
        $qb
        ->andWhere('post.visibilite = :visibilite')
            ->setParameter('visibilite', 'public');
        return $qb->getQuery()->getResult();
    }

    //COUNTERS
    public function countAllPosts(User $user){
        $qb = $this->getPostsQB($user);
        $qb
        ->select('COUNT(post)');
        return $qb->getQuery()->getSingleScalarResult();
    }

    public function countPublishedPosts(User $user){
        $now = new \DateTime();
        
        $qb = $this->getPostsQB($user);
        $qb
        ->select('COUNT(post)')
        ->andWhere('post.datePublication <= :now')
            ->setParameter('now', $now);
        if($qb->getQuery()->getSingleScalarResult()){
            $result = $qb->getQuery()->getSingleScalarResult();
        } else{
            $result = '0';
        }
        return $result;
    }

    public function countToBePublishedPosts(User $user, $order, $limit){
        $now = new \DateTime();
        
        $qb = $this->getPostsQB($user);
        $qb
        ->select('COUNT(post)')
        ->andWhere('post.datePublication > :now')
            ->setParameter('now', $now);
        return $qb->getQuery()->getSingleScalarResult();
    }

    public function countUnpublishedPosts(User $user){
        $now = new \DateTime();
        
        $qb = $this->getPostsQB($user);
        $qb
        ->select('COUNT(post)')
        ->andWhere('post.datePeremption <= :now')
            ->setParameter('now', $now);
        return $qb->getQuery()->getSingleScalarResult();
    }

    public function countToBeUnpublishedPosts(User $user){
        $now = new \DateTime();
        
        $qb = $this->getPostsQB($user);
        $qb
        ->select('COUNT(post)')
        ->andWhere('post.datePeremption > :now')
            ->setParameter('now', $now);
        return $qb->getQuery()->getSingleScalarResult();
    }

    public function countOnlinePosts(User $user){
        $now = new \DateTime();
        
        $qb = $this->getPostsQB($user);
        $qb
        ->select('COUNT(post)')
        ->andWhere('post.datePublication <= :now')
            ->setParameter('now', $now)
        ->andWhere('post.datePeremption > :now OR post.datePeremption IS NULL')
            ->setParameter('now', $now);
        return $qb->getQuery()->getSingleScalarResult();
    }

    public function countDraftPosts(User $user){
        $qb = $this->getPostsQB($user);
        $qb
        ->andWhere('post.datePublication IS NULL');
        return $qb->getQuery()->getSingleScalarResult();
    }
}
